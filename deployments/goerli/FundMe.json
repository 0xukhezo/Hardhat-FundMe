{
  "address": "0xBe0624e33AD81794a9D796aD31DbcE97a45F2E8f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__notOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMAL_USDC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb26e7d63a9add20a90e97550d05acc329076b31e27a5282e50be1a35d519d4d",
  "receipt": {
    "to": null,
    "from": "0xa8EC796eE75B04af1223445c587588181CEb56CD",
    "contractAddress": "0xBe0624e33AD81794a9D796aD31DbcE97a45F2E8f",
    "transactionIndex": 48,
    "gasUsed": "890940",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x29b5514b02d16a66cef7b3771472dd323589953ed84248197a881710f77dc028",
    "transactionHash": "0xeb26e7d63a9add20a90e97550d05acc329076b31e27a5282e50be1a35d519d4d",
    "logs": [],
    "blockNumber": 7633563,
    "cumulativeGasUsed": "24130119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "a8c106276579e79ecd0550651d45e25c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__notOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMAL_USDC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Alvaro Teran\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library and do a minimal apportation of 50 USDC\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This fuction funds this contract\"}},\"notice\":\"This contract is a demo of a simple funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__notOwner();\\n\\n/** @title A contract for crowd funding\\n * @author Alvaro Teran\\n * @notice This contract is a demo of a simple funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMAL_USDC = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (i_owner != msg.sender) {\\n            revert FundMe__notOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This fuction funds this contract\\n     * @dev This implements price feeds as our library and do a minimal apportation of 50 USDC\\n     */\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMAL_USDC,\\n            \\\"Didn't send enough!\\\"\\n        );\\n        \\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Tx failed!\\\");\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x1330b2ea4d5707fc08f9d93c0c2102ce0bb0d685803c232c1555b28d23e2be4d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/** @title A contract for price converter\\n * @author Alvaro Teran\\n * @notice This contract is a demo of a simple funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface _priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = _priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 _ethAmount,\\n        AggregatorV3Interface _priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(_priceFeed);\\n        uint256 ethAmountInUSDC = (ethPrice * _ethAmount) / 1e18;\\n        return ethAmountInUSDC;\\n    }\\n}\\n\",\"keccak256\":\"0x91a990c325ab6d7c688fe4cfd3d173747a5b7aeec14b2b56aacfcceab1545692\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516200101f3803806200101f83398181016040528101906100349190610112565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061013f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100df826100b4565b9050919050565b6100ef816100d4565b81146100fa57600080fd5b50565b60008151905061010c816100e6565b92915050565b600060208284031215610128576101276100af565b5b6000610136848285016100fd565b91505092915050565b608051610ebd620001626000396000818161033f01526106170152610ebd6000f3fe6080604052600436106100745760003560e01c80637302606f1161004e5780637302606f1461010c578063893d20e8146101495780639e87a5cd14610174578063b60d42881461019f57610083565b8063243b5bda1461008d5780633a7b6c74146100b85780633ccfd60b146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b6040516100af9190610801565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da919061084d565b6102df565b6040516100ec91906108bb565b60405180910390f35b34801561010157600080fd5b5061010a610326565b005b34801561011857600080fd5b50610133600480360381019061012e9190610902565b6105ca565b6040516101409190610801565b60405180910390f35b34801561015557600080fd5b5061015e610613565b60405161016b91906108bb565b60405180910390f35b34801561018057600080fd5b5061018961063b565b604051610196919061098e565b60405180910390f35b6101a76101a9565b005b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066590919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a06565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b60008082815481106102f4576102f3610a26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103ab576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561042e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103e4575b5050505050905060005b81518110156104b957600082828151811061045657610455610a26565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610a84565b915050610438565b50600067ffffffffffffffff8111156104d5576104d4610acd565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b5060009080519060200190610519929190610741565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610b2d565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610b8e565b60405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610671836106a1565b90506000670de0b6b3a7640000858361068a9190610bae565b6106949190610c37565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190610cf5565b5050509150506402540be400816107399190610d70565b915050919050565b8280548282559060005260206000209081019282156107ba579160200282015b828111156107b95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610761565b5b5090506107c791906107cb565b5090565b5b808211156107e45760008160009055506001016107cc565b5090565b6000819050919050565b6107fb816107e8565b82525050565b600060208201905061081660008301846107f2565b92915050565b600080fd5b61082a816107e8565b811461083557600080fd5b50565b60008135905061084781610821565b92915050565b6000602082840312156108635761086261081c565b5b600061087184828501610838565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108a58261087a565b9050919050565b6108b58161089a565b82525050565b60006020820190506108d060008301846108ac565b92915050565b6108df8161089a565b81146108ea57600080fd5b50565b6000813590506108fc816108d6565b92915050565b6000602082840312156109185761091761081c565b5b6000610926848285016108ed565b91505092915050565b6000819050919050565b600061095461094f61094a8461087a565b61092f565b61087a565b9050919050565b600061096682610939565b9050919050565b60006109788261095b565b9050919050565b6109888161096d565b82525050565b60006020820190506109a3600083018461097f565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b60006109f06013836109a9565b91506109fb826109ba565b602082019050919050565b60006020820190508181036000830152610a1f816109e3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a8f826107e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac257610ac1610a55565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b17600083610afc565b9150610b2282610b07565b600082019050919050565b6000610b3882610b0a565b9150819050919050565b7f5478206661696c65642100000000000000000000000000000000000000000000600082015250565b6000610b78600a836109a9565b9150610b8382610b42565b602082019050919050565b60006020820190508181036000830152610ba781610b6b565b9050919050565b6000610bb9826107e8565b9150610bc4836107e8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bfd57610bfc610a55565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c42826107e8565b9150610c4d836107e8565b925082610c5d57610c5c610c08565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8781610c68565b8114610c9257600080fd5b50565b600081519050610ca481610c7e565b92915050565b6000819050919050565b610cbd81610caa565b8114610cc857600080fd5b50565b600081519050610cda81610cb4565b92915050565b600081519050610cef81610821565b92915050565b600080600080600060a08688031215610d1157610d1061081c565b5b6000610d1f88828901610c95565b9550506020610d3088828901610ccb565b9450506040610d4188828901610ce0565b9350506060610d5288828901610ce0565b9250506080610d6388828901610c95565b9150509295509295909350565b6000610d7b82610caa565b9150610d8683610caa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dc557610dc4610a55565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0257610e01610a55565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3f57610e3e610a55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7c57610e7b610a55565b5b82820290509291505056fea26469706673582212204061573794f345387b92be099c343564900b50078afb400a46c3e420699f8beb64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80637302606f1161004e5780637302606f1461010c578063893d20e8146101495780639e87a5cd14610174578063b60d42881461019f57610083565b8063243b5bda1461008d5780633a7b6c74146100b85780633ccfd60b146100f557610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d2565b6040516100af9190610801565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da919061084d565b6102df565b6040516100ec91906108bb565b60405180910390f35b34801561010157600080fd5b5061010a610326565b005b34801561011857600080fd5b50610133600480360381019061012e9190610902565b6105ca565b6040516101409190610801565b60405180910390f35b34801561015557600080fd5b5061015e610613565b60405161016b91906108bb565b60405180910390f35b34801561018057600080fd5b5061018961063b565b604051610196919061098e565b60405180910390f35b6101a76101a9565b005b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461066590919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610a06565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6802b5e3af16b188000081565b60008082815481106102f4576102f3610a26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103ab576040517f8186952400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561042e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103e4575b5050505050905060005b81518110156104b957600082828151811061045657610455610a26565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104b190610a84565b915050610438565b50600067ffffffffffffffff8111156104d5576104d4610acd565b5b6040519080825280602002602001820160405280156105035781602001602082028036833780820191505090505b5060009080519060200190610519929190610741565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161054090610b2d565b60006040518083038185875af1925050503d806000811461057d576040519150601f19603f3d011682016040523d82523d6000602084013e610582565b606091505b50509050806105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd90610b8e565b60405180910390fd5b5050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610671836106a1565b90506000670de0b6b3a7640000858361068a9190610bae565b6106949190610c37565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106ea57600080fd5b505afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107229190610cf5565b5050509150506402540be400816107399190610d70565b915050919050565b8280548282559060005260206000209081019282156107ba579160200282015b828111156107b95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610761565b5b5090506107c791906107cb565b5090565b5b808211156107e45760008160009055506001016107cc565b5090565b6000819050919050565b6107fb816107e8565b82525050565b600060208201905061081660008301846107f2565b92915050565b600080fd5b61082a816107e8565b811461083557600080fd5b50565b60008135905061084781610821565b92915050565b6000602082840312156108635761086261081c565b5b600061087184828501610838565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108a58261087a565b9050919050565b6108b58161089a565b82525050565b60006020820190506108d060008301846108ac565b92915050565b6108df8161089a565b81146108ea57600080fd5b50565b6000813590506108fc816108d6565b92915050565b6000602082840312156109185761091761081c565b5b6000610926848285016108ed565b91505092915050565b6000819050919050565b600061095461094f61094a8461087a565b61092f565b61087a565b9050919050565b600061096682610939565b9050919050565b60006109788261095b565b9050919050565b6109888161096d565b82525050565b60006020820190506109a3600083018461097f565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b60006109f06013836109a9565b91506109fb826109ba565b602082019050919050565b60006020820190508181036000830152610a1f816109e3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a8f826107e8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac257610ac1610a55565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b17600083610afc565b9150610b2282610b07565b600082019050919050565b6000610b3882610b0a565b9150819050919050565b7f5478206661696c65642100000000000000000000000000000000000000000000600082015250565b6000610b78600a836109a9565b9150610b8382610b42565b602082019050919050565b60006020820190508181036000830152610ba781610b6b565b9050919050565b6000610bb9826107e8565b9150610bc4836107e8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bfd57610bfc610a55565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c42826107e8565b9150610c4d836107e8565b925082610c5d57610c5c610c08565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8781610c68565b8114610c9257600080fd5b50565b600081519050610ca481610c7e565b92915050565b6000819050919050565b610cbd81610caa565b8114610cc857600080fd5b50565b600081519050610cda81610cb4565b92915050565b600081519050610cef81610821565b92915050565b600080600080600060a08688031215610d1157610d1061081c565b5b6000610d1f88828901610c95565b9550506020610d3088828901610ccb565b9450506040610d4188828901610ce0565b9350506060610d5288828901610ce0565b9250506080610d6388828901610c95565b9150509295509295909350565b6000610d7b82610caa565b9150610d8683610caa565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dc557610dc4610a55565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0257610e01610a55565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3f57610e3e610a55565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7c57610e7b610a55565b5b82820290509291505056fea26469706673582212204061573794f345387b92be099c343564900b50078afb400a46c3e420699f8beb64736f6c63430008090033",
  "devdoc": {
    "author": "Alvaro Teran",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library and do a minimal apportation of 50 USDC"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This fuction funds this contract"
      }
    },
    "notice": "This contract is a demo of a simple funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}